#include <iostream>  // Подключение стандартной библиотеки ввода/вывода
#include <vector>    // Подключение стандартной библиотеки для работы с векторами
#include <algorithm> // Подключение стандартной библиотеки для использования алгоритмов
#include <stdexcept> // Подключение стандартной библиотеки для обработки исключений

using namespace std; // Использование пространства имен std для упрощения доступа к стандартным функциям

struct Date { // Объявление структуры Date
    int day;    // Поле для хранения дня
    int month;  // Поле для хранения месяца
    int year;   // Поле для хранения года

    bool isValidDate() { // Метод для проверки корректности даты
        if (year < 0 || month < 1 || month > 12 || day < 1 || day > 31) { // Проверка основных условий
            return false; // Дата некорректна
        }
        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) { // Проверка дней в месяцах с 30 днями
            return false; // Дата некорректна
        }
        if (month == 2) { // Проверка февраля
            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) { // Проверка високосного года
                if (day > 29) { // День в феврале больше 29
                    return false; // Дата некорректна
                }
            } else {
                if (day > 28) { // День в феврале больше 28
                    return false; // Дата некорректна
                }
            }
        }
        return true; // Дата корректна
    }

    void newDate(int d, int m, int y) { // Метод для обновления значений даты
        day = d;    // Установка дня
        month = m;  // Установка месяца
        year = y;   // Установка года
    }

    string getDayOfWeek() { // Метод для получения дня недели
        static string days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}; // Массив с названиями дней недели
        int t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6}; // Параметры для вычисления дня недели
        year -= month < 3; // Поправка для января и февраля
        int dayOfWeek = (year + year / 4 - year / 100 + year / 400 + t[month - 1] + day) % 7; // Вычисление дня недели
        return days[dayOfWeek]; // Возвращаем название дня недели
    }

    int calculateDifference(const Date& date) { // Метод для вычисления разницы между датами
        int yearDiff = year - date.year; // Разница в годах
        int monthDiff = month - date.month; // Разница в месяцах
        int dayDiff = day - date.day; // Разница в днях
        return yearDiff * 365 + monthDiff * 30 + dayDiff; // Возвращаем общую разницу в днях
    }

    void printDate() { // Метод для вывода даты на экран
        string monthNames[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}; // Массив с названиями месяцев
        cout << monthNames[month - 1] << " " << day << ", " << year << endl; // Выводим дату в формате "Месяц День, Год"
    }

    bool operator<(const Date& other) const { // Перегрузка оператора < для сравнения дат
        if (year != other.year) { // Сравнение годов
            return year < other.year; // Год текущей даты меньше
        }
        if (month != other.month) { // Сравнение месяцев
            return month < other.month; // Месяц текущей даты меньше
        }
        return day < other.day; // День текущей даты меньше
    }
};

bool compareDates(const Date& date1, const Date& date2) { // Функция для сравнения двух дат
    return date1 < date2; // Используем перегруженный оператор <
}

int main() {
    vector<Date> dates; // Создаем вектор для хранения дат

    // Добавляем даты в вектор
    dates.push_back({15, 3, 2023});
    dates.push_back({25, 12, 2022});
    dates.push_back({1, 1, 2024});

    // Сортируем даты
    sort(dates.begin(), dates.end(), compareDates);

    // Выводим отсортированные даты на экран
    for (const auto& date : dates) {
        date.printDate();
    }

    return 0;
}
